# Version 2 front end
import streamlit as st
from pathlib import Path
from dotenv import load_dotenv
from langchain_community.callbacks.streamlit import StreamlitCallbackHandler
from langchain_community.chat_message_histories import StreamlitChatMessageHistory
from gemi_agent_v1 import get_llm_and_agent1 as agentV1
from gemi_agent_v2 import get_llm_and_agent2 as agentV2
import warnings
from load_key import EnvLoader

warnings.filterwarnings("ignore")

env_loader = EnvLoader()
env_loader.load_all()
# === THI·∫æT L·∫¨P TRANG WEB ===
def setup_page():
    """
    C·∫•u h√¨nh giao di·ªán trang web
    """
    st.set_page_config(
        page_title="University Admission Assistant",
        page_icon="üéì",
        layout="wide"
    )

# === KH·ªûI T·∫†O ·ª®NG D·ª§NG ===
def initialize_app():
    """
    Kh·ªüi t·∫°o ·ª©ng d·ª•ng, bao g·ªìm c√°c bi·∫øn v√† giao di·ªán
    """
    setup_page()

    # Kh·ªüi t·∫°o danh s√°ch l·ªãch s·ª≠ tr√≤ chuy·ªán
    if "chat_histories" not in st.session_state:
        st.session_state.chat_histories = []

    # Kh·ªüi t·∫°o l·ªãch s·ª≠ tin nh·∫Øn hi·ªán t·∫°i
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "assistant", "content": "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"}
        ]

# === THANH C√îNG C·ª§ B√äN TR√ÅI ===
def setup_sidebar():
    """
    T·∫°o thanh c√¥ng c·ª• b√™n tr√°i v·ªõi c√°c t√πy ch·ªçn
    """
    with st.sidebar:
        st.title("‚öôÔ∏è C·∫•u h√¨nh")
        st.header("üéì Tr·ª£ L√Ω Tuy·ªÉn Sinh ƒê·∫°i H·ªçc")
        st.markdown(
            """
            H·ªá th·ªëng h·ªó tr·ª£ tra c·ª©u th√¥ng tin tuy·ªÉn sinh c·ªßa c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc t·∫°i TP.HCM:
            - Xem th√™m t·∫°i ph·∫ßn gi·ªõi thi·ªáu
            """
        )

        # N√∫t t·∫°o m·ªõi cu·ªôc tr√≤ chuy·ªán
        if st.button("üÜï New Chat"):
            if st.session_state.messages:
                st.session_state.chat_histories.append(st.session_state.messages)
            st.session_state.messages = [
                {"role": "assistant", "content": "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"}
            ]
            
            st.session_state.reset_msgs = True
            st.success("Cu·ªôc tr√≤ chuy·ªán m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o!")

        # Ch·ªçn model AI
        st.header("ü§ñ Model AI")
        model_choice = st.radio(
            "Ch·ªçn phi√™n b·∫£n ƒë·ªÉ tr·∫£ l·ªùi:",
            ["Version 1", "Version 2"]
        )

        return model_choice

# === HI·ªÇN TH·ªä L·ªäCH S·ª¨ TR√í CHUY·ªÜN ===
def show_chat_histories():
    """
    Hi·ªÉn th·ªã danh s√°ch l·ªãch s·ª≠ c√°c cu·ªôc tr√≤ chuy·ªán
    """
    st.header("üìú L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán")
    if st.session_state.chat_histories:
        for i, chat in enumerate(st.session_state.chat_histories):
            with st.expander(f"Cu·ªôc tr√≤ chuy·ªán {i+1}"):
                for msg in chat:
                    role = "üë§ Ng∆∞·ªùi d√πng" if msg["role"] == "human" else "ü§ñ AI"
                    st.markdown(f"**{role}:** {msg['content']}")
    else:
        st.write("Ch∆∞a c√≥ l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán n√†o.")

def introduction():
    st.title("AI H·ªó Tr·ª£ Tuy·ªÉn Sinh - 15 Tr∆∞·ªùng ƒê·∫°i H·ªçc TP.HCM")
    
    st.markdown("""
    ## Gi·ªõi thi·ªáu
    H·ªá th·ªëng AI h·ªó tr·ª£ tuy·ªÉn sinh gi√∫p so s√°nh, tra c·ª©u th√¥ng tin v·ªÅ 15 tr∆∞·ªùng ƒë·∫°i h·ªçc t·∫°i TP.HCM:
    
    1. **Tr∆∞·ªùng ƒê·∫°i h·ªçc Nguy·ªÖn T·∫•t Th√†nh** (NTTU)  
    2. **Tr∆∞·ªùng ƒê·∫°i h·ªçc S∆∞ Ph·∫°m TP HCM** (HCMUE)  
    3. **Tr∆∞·ªùng ƒê·∫°i h·ªçc Y D∆∞·ª£c TP HCM** (UMP)  
    4. **Tr∆∞·ªùng ƒê·∫°i h·ªçc T√†i Ch√≠nh - Marketing** (UFM)  
    5. **Tr∆∞·ªùng ƒê·∫°i h·ªçc VƒÉn Lang** (VLU)  
    6. **Tr∆∞·ªùng ƒê·∫°i h·ªçc Y Khoa Ph·∫°m Ng·ªçc Th·∫°ch** (PNTU)  
    7. **Tr∆∞·ªùng ƒê·∫°i h·ªçc S∆∞ Ph·∫°m K·ªπ Thu·∫≠t TP HCM** (HCMUTE)  
    8. **Tr∆∞·ªùng ƒê·∫°i h·ªçc Ngo·∫°i Th∆∞∆°ng TP HCM** (FTU2)  
    9. **Tr∆∞·ªùng ƒê·∫°i h·ªçc T√¥n ƒê·ª©c Th·∫Øng** (TDTU)  
    10. **Tr∆∞·ªùng ƒê·∫°i h·ªçc Kinh T·∫ø TP HCM** (UEH)  
    11. **Tr∆∞·ªùng ƒê·∫°i h·ªçc FPT** (FPTU)  
    12. **Tr∆∞·ªùng ƒê·∫°i h·ªçc B√°ch Khoa TP HCM** (BKU)  
    13. **Tr∆∞·ªùng ƒê·∫°i h·ªçc Khoa H·ªçc T·ª± Nhi√™n TP HCM** (HCMUS)  
    14. **Tr∆∞·ªùng ƒê·∫°i h·ªçc M·ªü TP HCM** (OU)  
    15. **Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng Ngh·ªá Th√¥ng Tin TP HCM** (UIT)  
    """)
    
    st.markdown("""
    ## Phi√™n b·∫£n H·ªá th·ªëng AI
    H·ªá th·ªëng h·ªó tr·ª£ hai phi√™n b·∫£n:
    - **Phi√™n b·∫£n 1:** Adaptive RAG
    - **Phi√™n b·∫£n 2:** Corrective RAG
    
    API s·ª≠ d·ª•ng:
    - **Gemini AI** (Model: Gemini 1.5 Pro)
    - **Groq AI** (Model: Llama 3.3 70B Versatile)
    """)
    
    st.markdown("""
    ## Li√™n h·ªá s·∫£n ph·∫©m
    **521H0385 - Tr·∫ßn Qu·ªëc An (KHMT)**  
    **521H0517 - Ho√†ng ƒê√¨nh Qu√Ω V≈©**  
    üìß Email: hoangdinhquyvu.snape.22@gmail.com
    """)


def setup_chat_interface(model_choice):
    st.title("üí¨ AI Assistant")
    
    # Caption ƒë·ªông theo model
    if model_choice == "Version 1":
        st.caption("üöÄ Tr·ª£ l√Ω AI Tuy·ªÉn sinh s·ª≠ d·ª•ng Adaptive RAG")
    else:
        st.caption("üöÄ Tr·ª£ l√Ω AI Tuy·ªÉn sinh s·ª≠ d·ª•ng Corrective RAG")
    
    msgs = StreamlitChatMessageHistory(key="langchain_messages")
    
    if st.session_state.get("reset_msgs"):
        msgs.clear()  # Reset l·ªãch s·ª≠ tin nh·∫Øn trong LangChain
        st.session_state.reset_msgs = False
        
        
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "assistant", "content": "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"}
        ]
        msgs.add_ai_message("T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?")

    for msg in st.session_state.messages:
        role = "assistant" if msg["role"] == "assistant" else "human"
        st.chat_message(role).write(msg["content"])
        
    return msgs

# === X·ª¨ L√ù TIN NH·∫ÆN NG∆Ø·ªúI D√ôNG ===
def handle_user_input(prompt, msgs, agent_executor):
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn:
    1. Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    2. G·ªçi AI x·ª≠ l√Ω v√† tr·∫£ l·ªùi
    3. L∆∞u v√†o l·ªãch s·ª≠ chat
    """
    
    
    st.session_state.messages.append({"role": "human", "content": prompt})
    st.chat_message("human").write(prompt)
    msgs.add_user_message(prompt)

    # X·ª≠ l√Ω v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
    with st.chat_message("assistant"):
        st_callback = StreamlitCallbackHandler(st.container())
        
        # L·∫•y l·ªãch s·ª≠ chat ƒë·ªÉ c√πng v·ªõi prompt t·∫°o th√†nh 1 context. 
        chat_history = [
            {"role": msg["role"], "content": msg["content"]}
            for msg in st.session_state.messages[:-1]
        ]

        # G·ªçi AI x·ª≠ l√Ω
        response = agent_executor.invoke(
            {
                "input": prompt,
                "chat_history": chat_history
            },
            {"callbacks": [st_callback]}
        )

        # L∆∞u v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
        output = response["output"]
        st.session_state.messages.append({"role": "assistant", "content": output})
        msgs.add_ai_message(output)
        st.write(output)

# === H√ÄM CH√çNH ===
def render():
    """
    H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn lu·ªìng ch∆∞∆°ng tr√¨nh
    """
    initialize_app()
    prompt = st.chat_input("H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ th√¥n tin tuy·ªÉn sinh")
    tab1, tab2, tab3 = st.tabs(["Gi·ªõi thi·ªáu","Chat", "L·ªãch s·ª≠ chat"])
    
    with tab1:
        introduction()
        
    with tab2:
        # Thi·∫øt l·∫≠p sidebar
        model_choice= setup_sidebar()
        msgs = setup_chat_interface(model_choice)

        if model_choice == "Version 1":
            agent_executor = agentV1()
        else:
            agent_executor = agentV2()

        if prompt:      
            handle_user_input(prompt, msgs, agent_executor)

    with tab3:
        # Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán
        show_chat_histories()

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    render()
